//CONTACT MANAGEMENT SYSTEM:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAME_LEN 50
#define MAX_PHONE_LEN 15
#define MAX_EMAIL_LEN 50
#define FILE_NAME "contacts.txt"

typedef struct {
    char name[MAX_NAME_LEN];
    char phone[MAX_PHONE_LEN];
    char email[MAX_EMAIL_LEN];
} Contact;

// Function declarations
void displayMenu();
void addContact();
void viewContacts();
void editContact();
void deleteContact();
void loadContacts();
void saveContacts();
void clearBuffer();

Contact contacts[100];
int contactCount = 0;

int main() {
    int choice;

    // Load contacts from file
    loadContacts();

    while (1) {
        displayMenu();
        printf("Enter your choice: ");
        scanf("%d", &choice);
        clearBuffer();  // To consume any extra newline characters

        switch (choice) {
            case 1:
                addContact();
                break;
            case 2:
                viewContacts();
                break;
            case 3:
                editContact();
                break;
            case 4:
                deleteContact();
                break;
            case 5:
                saveContacts();
                printf("Exiting the program...\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}

void displayMenu() {
    printf("\nContact Management System\n");
    printf("1. Add New Contact\n");
    printf("2. View Contacts\n");
    printf("3. Edit Contact\n");
    printf("4. Delete Contact\n");
    printf("5. Exit\n");
}

void addContact() {
    if (contactCount >= 100) {
        printf("Contact list is full! Cannot add more contacts.\n");
        return;
    }

    Contact newContact;
    printf("Enter name: ");
    fgets(newContact.name, MAX_NAME_LEN, stdin);
    newContact.name[strcspn(newContact.name, "\n")] = '\0';  // Remove newline character

    printf("Enter phone number: ");
    fgets(newContact.phone, MAX_PHONE_LEN, stdin);
    newContact.phone[strcspn(newContact.phone, "\n")] = '\0';

    printf("Enter email address: ");
    fgets(newContact.email, MAX_EMAIL_LEN, stdin);
    newContact.email[strcspn(newContact.email, "\n")] = '\0';

    contacts[contactCount++] = newContact;
    printf("Contact added successfully!\n");
}

void viewContacts() {
    if (contactCount == 0) {
        printf("No contacts available.\n");
        return;
    }

    printf("\nContact List:\n");
    for (int i = 0; i < contactCount; i++) {
        printf("Contact %d:\n", i + 1);
        printf("  Name: %s\n", contacts[i].name);
        printf("  Phone: %s\n", contacts[i].phone);
        printf("  Email: %s\n\n", contacts[i].email);
    }
}

void editContact() {
    int index;
    printf("Enter the contact number to edit (1 to %d): ", contactCount);
    scanf("%d", &index);
    clearBuffer();  // Corrected this line

    if (index < 1 || index > contactCount) {
        printf("Invalid contact number.\n");
        return;
    }

    index--;  // Adjust for zero-based indexing
    printf("Editing Contact: %s\n", contacts[index].name);

    printf("Enter new name (or press Enter to keep current): ");
    char temp[MAX_NAME_LEN];
    fgets(temp, MAX_NAME_LEN, stdin);
    temp[strcspn(temp, "\n")] = '\0';
    if (strlen(temp) > 0) {
        strcpy(contacts[index].name, temp);
    }

    printf("Enter new phone number (or press Enter to keep current): ");
    fgets(temp, MAX_PHONE_LEN, stdin);
    temp[strcspn(temp, "\n")] = '\0';
    if (strlen(temp) > 0) {
        strcpy(contacts[index].phone, temp);
    }

    printf("Enter new email address (or press Enter to keep current): ");
    fgets(temp, MAX_EMAIL_LEN, stdin);
    temp[strcspn(temp, "\n")] = '\0';
    if (strlen(temp) > 0) {
        strcpy(contacts[index].email, temp);
    }

    printf("Contact updated successfully!\n");
}

void deleteContact() {
    int index;
    printf("Enter the contact number to delete (1 to %d): ", contactCount);
    scanf("%d", &index);
    clearBuffer();

    if (index < 1 || index > contactCount) {
        printf("Invalid contact number.\n");
        return;
    }

    index--;  // Adjust for zero-based indexing

    // Shift all subsequent contacts left
    for (int i = index; i < contactCount - 1; i++) {
        contacts[i] = contacts[i + 1];
    }

    contactCount--;
    printf("Contact deleted successfully!\n");
}

void loadContacts() {
    FILE *file = fopen(FILE_NAME, "r");
    if (!file) {
        printf("No existing contacts found. Starting fresh.\n");
        return;
    }

    while (fscanf(file, "%49[^\n]\n%14[^\n]\n%49[^\n]\n", contacts[contactCount].name,
            contacts[contactCount].phone, contacts[contactCount].email) == 3) {
        contactCount++;
    }

    fclose(file);
}

void saveContacts() {
    FILE *file = fopen(FILE_NAME, "w");
    if (!file) {
        printf("Failed to save contacts to file.\n");
        return;
    }

    for (int i = 0; i < contactCount; i++) {
        fprintf(file, "%s\n%s\n%s\n", contacts[i].name, contacts[i].phone, contacts[i].email);
    }

    fclose(file);
    printf("Contacts saved successfully.\n");
}

void clearBuffer() {
    while (getchar() != '\n');  // Clear the input buffer
}
